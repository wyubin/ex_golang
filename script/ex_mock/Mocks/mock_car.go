// Code generated by MockGen. DO NOT EDIT.
// Source: cars.go

// Package Mocks is a generated GoMock package.
package Mocks

import (
	reflect "reflect"

	cars "example.com/ex_mock"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockCAR is a mock of CAR interface.
type MockCAR struct {
	ctrl     *gomock.Controller
	recorder *MockCARMockRecorder
}

// MockCARMockRecorder is the mock recorder for MockCAR.
type MockCARMockRecorder struct {
	mock *MockCAR
}

// NewMockCAR creates a new mock instance.
func NewMockCAR(ctrl *gomock.Controller) *MockCAR {
	mock := &MockCAR{ctrl: ctrl}
	mock.recorder = &MockCARMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAR) EXPECT() *MockCARMockRecorder {
	return m.recorder
}

// EngineCheck mocks base method.
func (m *MockCAR) EngineCheck(arg0 *gin.Context, arg1 cars.CAR) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineCheck", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EngineCheck indicates an expected call of EngineCheck.
func (mr *MockCARMockRecorder) EngineCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineCheck", reflect.TypeOf((*MockCAR)(nil).EngineCheck), arg0, arg1)
}

// Start mocks base method.
func (m *MockCAR) Start(arg0 *gin.Context, arg1 string, arg2 cars.CAR) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCARMockRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCAR)(nil).Start), arg0, arg1, arg2)
}
